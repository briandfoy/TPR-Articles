<ASCII-MAC>
<Version:5><FeatureSet:InDesign-Roman><ColorTable:=<Black:COLOR:CMYK:Process:0,0,0,1>>
<DefineCharStyle:pod-I=<Nextstyle:pod-I><cColor:Black><cTypeface:Italic><cSize:9.500000><cHorizontalScale:1.000000><cTracking:0><cBaselineShift:0.000000><cCase:Normal><cStrokeColor:None><cLanguage:English\: USA><cUnderline:0><cFont:Minion \(T1\)><cPosition:Normal><cStrikethru:0><cColorTint:-1.000000>>
<DefineCharStyle:pod-C=<Nextstyle:pod-C><cColor:Black><cTypeface:Regular><cSize:9.500000><cHorizontalScale:1.000000><cTracking:0><cBaselineShift:0.000000><cCase:Normal><cStrokeColor:None><cUnderline:0><cFont:Courier New><cPosition:Normal><cStrikethru:0><cColorTint:-1.000000>>
<DefineCharStyle:pod-B=<Nextstyle:pod-B><cColor:Black><cTypeface:Bold><cSize:9.500000><cHorizontalScale:1.000000><cTracking:0><cBaselineShift:0.000000><cCase:Normal><cStrokeColor:None><cUnderline:0><cFont:Courier New><cPosition:Normal><cStrikethru:0><cColorTint:-1.000000>>
<DefineParaStyle:NormalParagraphStyle=<Nextstyle:NormalParagraphStyle>>
<DefineParaStyle:Feature Section=<BasedOn:NormalParagraphStyle><Nextstyle:Feature Section><cTypeface:Bold><cSize:10.000000><pSpaceBefore:4.500000><pTabRuler:20\,Left\,.\,0\,-\;258\,Left\,.\,0\,-\;><cFont:Rockwell><pGridAlign:BaseLine>>
<DefineParaStyle:Module Author Byline=<Nextstyle:Module Author Byline><cTypeface:Italic><cSize:9.500000><cLigatures:0><pDropCapCharacters:1><pDropCapLines:1><pHyphenationLadderLimit:0><cLanguage:English\: USA><pHyphenation:0><pHyphenationZone:0.000000><cFont:Minion \(T1\)><pMaxLetterspace:0.050000><pMinLetterspace:-0.020000><pMaxGlyphScale:1.050000><pMinGlyphScale:0.950000><cHang:Baseline><pSingleWordAlignment:Left><pTextAlignment:Right><pGridAlign:BaseLine><bulFont:\<TextFont\>><bulTypeFace:\<TextStyle\>>>
<DefineParaStyle:Feature Lead=<Nextstyle:Feature Lead><cSize:9.500000><cLigatures:0><cTracking:50><pDropCapCharacters:1><pDropCapLines:3><pHyphenationLadderLimit:0><cLeading:11.400000><cLanguage:English\: USA><pHyphenation:0><pHyphenationZone:0.000000><cFont:Minion \(T1\)><pMaxLetterspace:0.050000><pMinLetterspace:-0.020000><pMaxGlyphScale:1.050000><pMinGlyphScale:0.950000><cHang:Baseline><pSingleWordAlignment:Left><pTextAlignment:JustifyLeft><pGridAlign:BaseLine>>
<DefineParaStyle:Feature Para=<BasedOn:Feature Lead><Nextstyle:Feature Para><pDropCapLines:1><pFirstLineIndent:12.024000>>
<DefineParaStyle:Feature Section Lead=<BasedOn:Feature Para><Nextstyle:Feature Section Lead><pFirstLineIndent:0.000000><cLeading:-1.000000>>
<DefineParaStyle:Feature Code Para=<Nextstyle:Feature Code Para><cSize:9.500000><cLigatures:0><pHyphenationLadderLimit:0><pLeftIndent:10.799999><cLanguage:English\: USA><pHyphenation:0><pHyphenateCapitals:0><pHyphenationZone:0.000000><pTabRuler:18\,Left\,.\,0\,\;31.5\,Left\,.\,0\,\;45\,Left\,.\,0\,\;58.5\,Left\,.\,0\,\;72\,Left\,.\,0\,\;85.5\,Left\,.\,0\,\;99\,Left\,.\,0\,\;112.5\,Left\,.\,0\,\;126\,Left\,.\,0\,\;139.5\,Left\,.\,0\,\;153\,Left\,.\,0\,\;166.5\,Left\,.\,0\,\;180\,Left\,.\,0\,\;193.5\,Left\,.\,0\,\;207\,Left\,.\,0\,\;220.5\,Left\,.\,0\,\;234\,Left\,.\,0\,\;><cFont:Courier New><pMaxLetterspace:0.050000><pMinLetterspace:-0.020000><pMaxGlyphScale:1.050000><pMinGlyphScale:0.950000><cHang:Baseline><pSingleWordAlignment:Left><pGridAlign:BaseLine>>
<DefineParaStyle:Feature Sub Section=<BasedOn:Feature Section><Nextstyle:Feature Sub Section><cUnderlineGapColor:None><cStrikeThroughGapColor:None><pWarichuAlignment:Left><rUseOTProGlyph:1><cRubyEdgeSpace:1>>
<DefineParaStyle:News URL=<BasedOn:NormalParagraphStyle><Nextstyle:News URL><cSize:9.500000><pSpaceAfter:4.500000><cFont:Minion \(T1\)><pRuleAboveGapColor:None><pRuleBelowGapColor:None><cUnderlineGapColor:None><cStrikeThroughGapColor:None><pGridAlign:BaseLine><pWarichuAlignment:Left><rUseOTProGlyph:1><cRubyEdgeSpace:1>>
<DefineParaStyle:News para=<BasedOn:NormalParagraphStyle><Nextstyle:News para><cSize:9.500000><cFont:Minion \(T1\)><pRuleAboveGapColor:None><pRuleBelowGapColor:None><cUnderlineGapColor:None><cStrikeThroughGapColor:None><pGridAlign:BaseLine><pWarichuAlignment:Left><rUseOTProGlyph:1><cRubyEdgeSpace:1>>
<DefineParaStyle:News Headline=<BasedOn:NormalParagraphStyle><Nextstyle:News Headline><cTypeface:Bold><cSize:9.500000><pSpaceBefore:4.500000><cFont:Gill Sans \(T1\)><pRuleAboveGapColor:None><pRuleBelowGapColor:None><cUnderlineGapColor:None><cStrikeThroughGapColor:None><pGridAlign:BaseLine><pWarichuAlignment:Left><rUseOTProGlyph:1><cRubyEdgeSpace:1>>
<DefineParaStyle:Calendar URL=<Nextstyle:Calendar URL><cTypeface:Italic><cSize:10.000000><cLanguage:English\: USA><cFont:Minion \(T1\)><pRuleAboveGapColor:None><pRuleBelowGapColor:None><pTextAlignment:Center><cUnderlineGapColor:None><cStrikeThroughGapColor:None><pWarichuAlignment:Left><rUseOTProGlyph:1><cRubyEdgeSpace:1>>
<DefineParaStyle:Calendar title=<Nextstyle:Calendar title><cSize:10.000000><cLanguage:English\: USA><cFont:Minion \(T1\)><pRuleAboveGapColor:None><pRuleBelowGapColor:None><pTextAlignment:Center><cUnderlineGapColor:None><cStrikeThroughGapColor:None><pWarichuAlignment:Left><rUseOTProGlyph:1><cRubyEdgeSpace:1>>
<DefineParaStyle:Calendar location=<Nextstyle:Calendar location><cSize:10.000000><cLanguage:English\: USA><cFont:Minion \(T1\)><pRuleAboveGapColor:None><pRuleBelowGapColor:None><pTextAlignment:Center><cUnderlineGapColor:None><cStrikeThroughGapColor:None><pWarichuAlignment:Left><rUseOTProGlyph:1><cRubyEdgeSpace:1>>
<DefineParaStyle:Calendar date=<Nextstyle:Calendar date><cTypeface:Bold><cSize:11.000000><cCase:All Caps><cLanguage:English\: USA><cFont:Gill Sans \(T1\)><pRuleAboveGapColor:None><pRuleBelowGapColor:None><pTextAlignment:Center><cUnderlineGapColor:None><cStrikeThroughGapColor:None><pWarichuAlignment:Left><rUseOTProGlyph:1><cRubyEdgeSpace:1>>
<DefineParaStyle:Feature Title=<Nextstyle:Feature Title><cSize:26.500000><cLeading:13.500000><cFont:Rockwell Extra Bold><pTextAlignment:Center>>
<DefineParaStyle:Feature Byline=<BasedOn:NormalParagraphStyle><Nextstyle:Feature Byline><cTypeface:Italic><cSize:11.000000><cLeading:13.000000><cFont:Gill Sans \(TT\)><pTextAlignment:Right>>
<DefineParaStyle:Feature Deck=<BasedOn:Feature Byline><Nextstyle:Feature Deck><cTypeface:Regular><pSpaceBefore:4.500000><pTextAlignment:Center>>
<DefineParaStyle:Normal=<Nextstyle:Normal><KeyboardShortcut:Shift\+Cmd\+Num 6><cSize:11.000000><cLigatures:0><pHyphenationLadderLimit:0><cLeading:13.000000><cLanguage:English\: USA><pHyphenation:0><pHyphenationZone:0.000000><pSpaceBefore:4.500000><pSpaceAfter:4.500000><cFont:Arial \(TT\)><pMaxLetterspace:0.050000><pMinLetterspace:-0.020000><pMaxGlyphScale:1.050000><pMinGlyphScale:0.950000><cHang:Baseline><pSingleWordAlignment:Left><pTextAlignment:JustifyLeft>>
<DefineParaStyle:Body Copy=<BasedOn:Normal><Nextstyle:Body Copy><cSize:9.500000><pFirstLineIndent:12.024000><cLeading:-1.000000><pSpaceBefore:0.000000><pSpaceAfter:0.000000><cFont:Minion \(T1\)><pGridAlign:BaseLine><bulFont:\<TextFont\>><bulTypeFace:\<TextStyle\>>>
<DefineParaStyle:author byline=<BasedOn:Feature Para><Nextstyle:author byline><cTypeface:Italic><bulFont:\<TextFont\>><bulTypeFace:\<TextStyle\>>>
<DefineParaStyle:article head=<BasedOn:Normal><Nextstyle:Normal><KeyboardShortcut:Shift\+Cmd\+Num 1><cSize:14.000000><cHorizontalScale:1.100000><pSpaceBefore:13.500000><pSpaceAfter:0.000000><cFont:Arial Black><pKeepWithNext:4><cSkew:15.000000><pRuleBelowColor:Black><pRuleBelowTint:100.000000><pRuleBelowOffset:9.000000>>
<DefineParaStyle:article subhead=<BasedOn:article head><Nextstyle:article subhead><KeyboardShortcut:Shift\+Cmd\+Num 2><cSize:11.000000><pSpaceBefore:18.000000>>
<pstyle:Feature Lead>Parrot has been in development since late 2001. What do we have to show for the past 6 years of effort? What<0x2019>s in Parrot<0x2019>s future? When will it be complete? This article will hopefully give you some idea as to the answers or at least point you in the general direction of an answer.
<pstyle:Feature Section><cTypeface:Regular><cFont:Wingdings>n<cTypeface:><cFont:> What is Parrot?	
<pstyle:Feature Section Lead>For those who don<0x2019>t already know, Parrot is a virtual machine designed for running dynamic languages such as Perl, Python, Ruby, etc. It was initially concieved to be the underlying virtual machine for Perl 6 but its mission also includes other dynamic languages since the problems faced by those languages are very similar. Parrot is implemented in C, but currently to build Parrot you also need to have Perl installed.
<pstyle:Feature Section><cTypeface:Regular><cFont:Wingdings>n<cTypeface:><cFont:> Where is Parrot today?	
<pstyle:Feature Section Lead>As of this writing, Parrot has specifications and implementations for bytecode, namespaces, lexical variables, objects, events, exceptions, and basic IO. There are just-in-time compilers for x86, amd64, ia64, ppc, mips, hppa and arm processors. Parrot has been made to run on these platforms: Linux, Solaris, Mac OS X, FreeBSD, Windows, and cygwin. There are many languages that have a Parrot implementation. Parrot has even been embedded in a certain popular web server.
<pstyle:Feature Section><cTypeface:Regular><cFont:Wingdings>n<cTypeface:><cFont:> Low level bits: What makes Parrot tick	
<pstyle:Feature Section Lead>The following are available in Parrot to make various software items such as language implementations and execution environments. They may not all be completely implemented, but generally enough has been implemented to be useful. Indeed, several of the languages that target Parrot, do use these features:
<pstyle:Feature Sub Section>Garbage collection
<pstyle:Feature Para>Parrot utilizes a generational mark and sweep garbage collector to ensure timely destruction of objects while also minimizing the impact on performance.
<pstyle:Feature Sub Section>Continuations
<pstyle:Feature Para>Parrot uses something called Continuation Passing Style for calling subroutines and other flow control items. Essentially a continuation is a snapshot of the execution environment that can be resumed at any time. Thus, at the end of a subroutine, a <0x201C>return<0x201D> is really just an execution of the continuation that was taken at the start of the subroutine with any values that the subroutine may want to return as arguments to the continuation. See <CharStyle:pod-I>http://www.intertwingly.net/blog/2005/04/13/Continuations-for- Curmudgeons<CharStyle:> for more info on continuations and continuation passing style.
<pstyle:Feature Para>Parrot hides the explicit nature of continuations behind syntax for executing and returning from subroutines, but there are opcodes to take and call continuations when I need them.
<pstyle:Feature Sub Section>Parrot Magic Cookies (PMC)
<pstyle:Feature Para>These are fundamental units of stuff in Parrot that aren<0x2019>t numbers or strings. PMCs are like objects in that they implement certain behavior and that behavior can be inherited by other PMCs. Language implementors can use PMCs to describe some detail of their language that Parrot may not natively provide.
<pstyle:Feature Sub Section>Namespaces
<pstyle:Feature Para>Namespaces have been fully specced and implemented. These can be used to partition code/data into useful compartments. For instance, each language that targets Parrot has its own namespace so that multiple languages can interoperate in the same Parrot execution. Namespaces are hierarchical in nature so that languages that support their own idea of namespaces can also make direct use of Parrot<0x2019>s namespace mechanism.
<pstyle:Feature Sub Section>Objects
<pstyle:Feature Para>Many dynamic programming languages are object oriented in nature or have object oriented features. Parrot provides an object model and primitive operations that allow these languages to implement the semantics appropriate for any object system. There is support for classes, attributes on those classes, methods on those classes, inheritance (single and multiple), multi-method dispatch, delegation, class composition (roles), object introspection, <CharStyle:pod-I>etc<CharStyle:>.
<pstyle:Feature Sub Section>Events
<pstyle:Feature Para>In order to be compatible with event-driven programming, Parrot provides a standard interface for events that works in conjunction with a scheduler to fire actions in response to those events.
<pstyle:Feature Sub Section>Exceptions
<pstyle:Feature Para>When something unusual happens in the course of execution, what is Parrot to do? One of the things it can do is throw an exception. There are facilities for throwing and catching exceptions, adding and removing exception handlers, querying whether or not an exception has been handled or not and terminating execution as appropriate.
<pstyle:Feature Sub Section>Native Call Interface (NCI)
<pstyle:Feature Para>The Native Call Interface allows Parrot to directly interface with existing C libraries without compiling them into Parrot. There is a Parrot opcode for loading the library into Parrot-space and another for creating a linkage between Parrot and the library<0x2019>s subroutines. So, for instance, with a little Parrot code to glue it all together, you can make Parrot subroutines that, when called, actually execute subroutines from within the library. In the Parrot distribution are some examples of how Parrot has been interfaced with the SDL graphics library using the NCI.
<pstyle:Feature Sub Section>Dynamically Loadable Opcodes
<pstyle:Feature Para>Besides invoking C functions in external libraries that you load during runtime, you can also write your own Parrot instructions. Parrot<0x2019>s <CharStyle:pod-I>micro-code<CharStyle:> is the C language, and after pre-processing your new opcode implementation and compilation into a shared library, the new ops can be loaded. After loading, you can use your new custom ops, just like any other built-in Parrot instruction. This feature is useful if you need to implement certain functionality that needs high performance.
<pstyle:Feature Section><cTypeface:Regular><cFont:Wingdings>n<cTypeface:><cFont:> Mid level bits: Parrot Compiler Toolkit	
<pstyle:Feature Section Lead>Since Parrot is designed to be the backend for dynamic programming languages, it provides a set of tools that can be used to help generate programming languages. Below are descriptions of those tools.
<pstyle:Feature Sub Section>Parrot Grammar Engine (PGE)
<pstyle:Feature Para>PGE parses a good bit of the Perl 6 Regex syntax so that languages can be described in terms of Perl 6 Regex. PGE has facilities for generating the parse tree for the grammar it is parsing as well as executing bits of Parrot code during the parse. Additionally, PGE can switch seemlessly between recursive descent (top down) and operator precedence parsing (bottom up) where appropriate in the grammar. Also, in keeping with the Perl 6 concept that Regex are just strange looking subroutines, PGE allows named rules to be implemented as Parrot subroutines for when specialized actions are needed.
<pstyle:Feature Sub Section>Transformation Grammar Engine (TGE)
<pstyle:Feature Para>TGE is a tool used to turn tree-like representations into other tree- like representations. This is primarily useful for turning a parse tree into an abstract syntax tree (AST) and then turn that AST into a tree of opcodes. This separation of concerns allows for multiple optimization opportunities. TGE also allows you to attach bits of information to the nodes in the tree so that you can build an <0x201C>attribute grammar<0x201D>. See <CharStyle:pod-I>http://en.wikipedia.org/wiki/Attribute_grammar<CharStyle:>.
<pstyle:Feature Sub Section>Not Quite Perl (NQP)
<pstyle:Feature Para>NQP is small compiler that uses a subset of the Perl 6 syntax. It is primarily designed to quickly transform parse trees created by PGE into some other representation (usually Parrot code) using Perl6ish syntax. Similar to TGE in nature, NQP leverages knowledge of Perl 6 to make code generation easier.
<pstyle:Feature Sub Section>Parrot Abstract Syntax Tree (PAST)
<pstyle:Feature Para>PAST is a standard abstract syntax tree for use by all languages that target Parrot as a backend. PAST contains nodes for common language items such as variables and operators and assignment and control flow.
<pstyle:Feature Sub Section>HLLCompiler
<pstyle:Feature Para>The HLLCompiler class provides a standard set of methods and a framework for compiler writers to use in building a compiler. Some examples of these methods are for registering a language with Parrot, parsing a language, generating syntax tree, and compiling a language.
<pstyle:Feature Section><cTypeface:Regular><cFont:Wingdings>n<cTypeface:><cFont:> High level bits: Languages	
<pstyle:Feature Section Lead>What programming languages are targetting Parrot? Currently in the Parrot distribution there are approximately 39 separate language implementations at various stages of completion. Here<0x2019>s a quick list of some of the languages as they appear in the Parrot source: apl, basic, zcode, cardinal (ruby), ecmascript (javascript), forth, lisp, lua, m4, ook, perl5, perl6, plumhead (php), punie (Perl 1), pynie (Python), scheme, and tcl.
<pstyle:Feature Para>Several of these languages are nothing more than a parser, but many of them have complete interpreters or compilers. Below are short descriptions of the more actively developed or more complete language implementations.
<pstyle:Feature Sub Section>abc
<pstyle:Feature Para>An implementation of the basic calculator found on most unix-ish systems. Since the language of this calculator is relatively small, <CharStyle:pod-B>abc<CharStyle:> is well suited as an example of how to use the Parrot Compiler Toolkit to construct the front end parts of a compiler including parsing and transformation into an abstract syntax tree. Thus <CharStyle:pod-C>abc<CharStyle:>, besides being a functioning implementation of <CharStyle:pod-C>bc<CharStyle:>, is a good tutorial for people who want to learn how to build a compiler.
<pstyle:Feature Sub Section>pynie
<pstyle:Feature Para>An implementation of the Python programming language. Pynie makes a good test bed for the Parrot Compiler Toolkit as a sanity check that Parrot is still on the right track.
<pstyle:Feature Sub Section>Pheme
<pstyle:Feature Para>An implementation of a programming language that is very similar to Scheme. Another language used to sanity test the Parrot Compiler Toolkit.
<pstyle:Feature Sub Section>ParTcl
<pstyle:Feature Para>This is a completly-from-scratch implementation of the programming language tcl. ParTcl is in active development and at last check it passes about 25% of Tcl<0x2019>s actual test suite.
<pstyle:Feature Sub Section>Perl 6
<pstyle:Feature Para>The raison d<0x2019>etre for Parrot, the Perl 6 implementation is coming along nicely. A standard grammar is being developed for Perl 6 that not only describes the language, but has placeholders for <0x201C>actions<0x201D> to be performed. The other Perl 6 implementations (Perl 5 and Haskell) are also able to make use of this same grammar. The Parrot-based Perl 6 compiler parses a good bit of this grammar and compiles it to Parrot code so that it can be executed.
<pstyle:Feature Section><cTypeface:Regular><cFont:Wingdings>n<cTypeface:><cFont:> Miscellaneous	
<pstyle:Feature Section Lead>Jeff Horwitz has created 2 modules for the Apache web server: <CharStyle:pod-C>mod_parrot<CharStyle:> and <CharStyle:pod-C>mod_perl6<CharStyle:>. <CharStyle:pod-C>mod_parrot<CharStyle:> allows for Parrot code to have access to the Apache API so that handlers can be written in Parrot. As a consequence, this means that any language that targets Parrot can also have access to the Apache API.
<pstyle:Feature Para>As a first example of this ability, <CharStyle:pod-C>mod_perl6<CharStyle:> allows handlers written in Perl 6. They are compiled on-the-fly using the Parrot-based Perl 6 compiler the first time they are executed and then persist in that particular instance of Apache.
<pstyle:Feature Section><cTypeface:Regular><cFont:Wingdings>n<cTypeface:><cFont:> What is left to do?	
<pstyle:Feature Section Lead>Parrot is still under active development. Though it is complete enough to implement many things, it does not quite have all of the features its designers would like. Some things that still need work:
<pstyle:Feature Sub Section>Concurrency
<pstyle:Feature Para>Parrot has some support for multi-threaded operations and it has been designed in from the start but there are still details that need to be ironed out of the specification and implementation.
<pstyle:Feature Sub Section>Complete implementations of all low level bits
<pstyle:Feature Para>There are implementations in the Parrot source tree for IO, events, exceptions, concurrency, <CharStyle:pod-I>etc<CharStyle:>., but many of them are only 90% implemented since just enough was done to scratch someone<0x2019>s itch. Before the 1.0 release we need the other 90% to be implemented. That is, the implementations need to be complete as per the specification and well tested such that there are no segfaults or strange behavior.
<pstyle:Feature Sub Section>Security model
<pstyle:Feature Para>The plan is to give Parrot a sandboxing mechanism such that execution environments can be created within Parrot that are completely separate from Parrot<0x2019>s own execution environment and any other execution environments that may be created. Limits will be placed on such things as CPU time, memory usage, disk usage, and code will be able to run using restricted set of opcodes. This is still in the design phase right now, but is set to be completed sometime in 2008.
<pstyle:Feature Sub Section>Multiple character sets
<pstyle:Feature Para>Parrot is designed to be a Unicode-friendly environment that should support multiple character sets within the same string. However, there is still some design work and implementation to be done.
<pstyle:Feature Para>For a schedule of the items that are still <0x201C>in the works<0x201D> along with projected completion dates and who the head cat-herder is for each subsection, see <CharStyle:pod-I>http://www.perlfoundation.org/parrot_grant_from_nlnet<CharStyle:>.
<pstyle:Feature Section><cTypeface:Regular><cFont:Wingdings>n<cTypeface:><cFont:> Getting involved	
<pstyle:Feature Section Lead>How can you help out? The friendly folks running the volunteer effort to implement the Parrot virtual machine are always looking for more people to help. Even if you don<0x2019>t know C or Perl, you can still help. Some of the activities that would be helpful are: writing documentation, proofreading, creating tests for Parrot and the various languages that target it, writing C code to flesh out more parts of Parrot, writing Perl 5 code to aid in code generation, <CharStyle:pod-I>etc<CharStyle:>.
<pstyle:Feature Para>The Parrot source code can be retrieved from the subversion repository at <CharStyle:pod-I>http://svn.perl.org/parrot<CharStyle:> or you can also subscribe or send email to <CharStyle:pod-I>parrot-porters@perl.org<CharStyle:> or join us on <CharStyle:pod-I>irc.perl.org/#parrot<CharStyle:> For more information, see <CharStyle:pod-I>http://www.parrotcode.org/<CharStyle:>
<pstyle:Feature Section><cTypeface:Regular><cFont:Wingdings>n<cTypeface:><cFont:> Acknowledgements	
<pstyle:Feature Section Lead>Many thanks to the following people (in no particular order) for their input (either in feedback on this article or in code in the Parrot source tree), without which we wouldn<0x2019>t have Parrot nor an article about its status: Allison Randal, chromatic, Will Coleda, Patrick R. Michaud, Jerry Gay, Leopold Toetsch, Kevin Tew, Andy Lester, Jonathan Worthington, Jeff Horwitz, and Klaas-Jan Stol.
<pstyle:Feature Para>And of course, our emeritus cat-herders: Dan Sugalski and Chip Salzenberg.
<pstyle:Feature Para>There are probably many people who regularly contribute to Parrot that I<0x2019>ve left out. If you are one of these people, I can assure you I did not leave your name out on purpose, but only because I couldn<0x2019>t think of it at the time of this writing. My humblest apologies to anyone who should be in this list but isn<0x2019>t.
<pstyle:Feature Section><cTypeface:Regular><cFont:Wingdings>n<cTypeface:><cFont:> References	
<pstyle:Feature Section><cTypeface:Regular><cFont:Wingdings>n<cTypeface:><cFont:> About the author	
<pstyle:Feature Section Lead>Jonathan Scott Duff works as an Applications Architect at an Austin-based software development company <CharStyle:pod-I>http://www.thunderdata.com/<CharStyle:>. He has a beautiful wife and four lovely children. When not working or spending time with his family, Scott tries to keep up with Parrot and Perl 6 development. Sometimes he can be found on IRC as PerlJam in one of the perl-related channels. But if you really want to get in touch with him, the best way is via email: <CharStyle:pod-I>duff@thunderdata.com<CharStyle:> or <CharStyle:pod-I>duff@pobox.com<CharStyle:>.
